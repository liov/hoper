<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--
status：用来指定log4j本身打印日志的级别，框架默认级别为warn (若是设置debug，log4j的配置过程也会展现出来)
monitorInterval：用于指定log4j自动重新配置的监测间隔时间，单位是秒(s)，最小的间隔时间是5s。(修改配置文件后无需重新发动应用，可以自动加载)
-->
<Configuration status="WARN" monitorInterval="30">
    <!-- 全局参数 -->
    <Properties>
        <property name="APP_NAME">content</property>
        <!-- 日志打印级别 -->
        <property name="LOG_LEVEL">INFO</property>
        <!-- 日志文件存储路径 -->
        <property name="LOG_HOME">../logs</property>
        <!-- 日志编码 -->
        <property name="CHARSET" value="UTF-8"/>
        <!-- 存储天数 -->
        <property name="LOG_MAX_HISTORY" value="60d"/>
        <!-- 单个日志文件最大值, 单位 = KB, MB, GB -->
        <property name="LOG_MAX_FILE_SIZE" value="10MB"/>
        <!-- 每天每个日志级别产生的文件最大数量 -->
        <property name="LOG_TOTAL_NUMBER_DAILY" value="100"/>
        <!-- 压缩文件的类型,支持zip和gz,建议Linux用gz,Windows用zip -->
        <property name="ARCHIVE_FILE_SUFFIX" value="zip"/>
        <!-- 日志文件名 -->
        <property name="LOG_FILE_NAME" value="${LOG_HOME}"/>
        <property name="FILE_NAME_PATTERN" value="${LOG_HOME}/%d{yyyy-MM-dd}"/>
        <!--日志输出格式-文件-->
        <property name="ENCODER_PATTERN">%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %5pid --- [%15.15t] %c{1.} [%L] : %m%n
        </property>
        <!--日志输出格式-控制台彩色打印-->
        <property name="DEFAULT_PATTERN">%clr{%d{yyyy-MM-dd HH:mm:ss.SSS}}{faint} %clr{%5p} %clr{${sys:PID}}{magenta} %clr{[%t]}{faint} %clr{%-c{1.}}{cyan}: %m%n%xwEx
        </property>
    </Properties>
    <Appenders>
        <!-- 控制台的输出配置 -->
        <Console name="Console" target="SYSTEM_OUT">
            <!-- 输出日志的格式 -->
            <PatternLayout pattern="${DEFAULT_PATTERN}" charset="${CHARSET}"/>
        </Console>
        <!-- 新增包含所有级别日志的文件 Appender -->
        <RollingFile name="RollingFileAllLevels" fileName="${LOG_FILE_NAME}/all.log"
                     filePattern="${FILE_NAME_PATTERN}/${APP_NAME}-all.%d{yyyy-MM-dd HH.mm}-%i.log">
            <Filters/>  <!-- 不过滤任何日志级别 -->
            <!-- 日志输出格式-文件 -->
            <PatternLayout pattern="${ENCODER_PATTERN}"/>
            <!-- 触发策略 -->
            <Policies>
                <!-- 归档每天的文件，每天滚动一次 -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <!-- 限制单个文件大小，日志达到size滚动一次 -->
                <SizeBasedTriggeringPolicy size="${LOG_MAX_FILE_SIZE}"/>
            </Policies>
            <!-- 限制每天文件个数 -->
            <DefaultRolloverStrategy compressionLevel="9" max="${LOG_TOTAL_NUMBER_DAILY}">
                <!-- 日志保留策略，日志只保留60天 -->
                <Delete basePath="${LOG_HOME}" maxDepth="1">
                    <IfFileName glob="*-all.*.log"/>
                    <IfLastModified age="${LOG_MAX_HISTORY}"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>
        <!-- 打印出所有的info及以下级别的信息，每次大小超过size进行压缩，作为存档-->
        <RollingFile name="RollingFileAll" fileName="${LOG_FILE_NAME}/info.log"
                     filePattern="${FILE_NAME_PATTERN}/${APP_NAME}-info.%d{yyyy-MM-dd HH.mm}-%i.log">
            <!-- 控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
            <ThresholdFilter level="${LOG_LEVEL}" onMatch="ACCEPT" onMismatch="DENY"/>
            <!-- 输出日志的格式 -->
            <PatternLayout pattern="${ENCODER_PATTERN}"/>
            <Policies>
                <!-- 归档每天的文件 -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <!-- 限制单个文件大小 -->
                <SizeBasedTriggeringPolicy size="${LOG_MAX_FILE_SIZE}"/>
            </Policies>
            <!-- 限制每天文件个数 -->
            <DefaultRolloverStrategy compressionLevel="9" max="${LOG_TOTAL_NUMBER_DAILY}">
                <Delete basePath="${LOG_HOME}" maxDepth="1">
                    <IfFileName glob="*-info.*.log"/>
                    <IfLastModified age="${LOG_MAX_HISTORY}"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>
        <RollingFile name="RollingFileDebug" fileName="${LOG_FILE_NAME}/debug.log"
                     filePattern="${FILE_NAME_PATTERN}/${APP_NAME}-debug.%d{yyyy-MM-dd HH.mm}-%i.log">
            <Filters>
                <ThresholdFilter level="DEBUG"/>
                <ThresholdFilter level="INFO" onMatch="DENY" onMismatch="NEUTRAL"/>
            </Filters>
            <PatternLayout pattern="${ENCODER_PATTERN}"/>
            <Policies>
                <!-- 归档每天的文件 -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <!-- 限制单个文件大小 -->
                <SizeBasedTriggeringPolicy size="${LOG_MAX_FILE_SIZE}"/>
            </Policies>
            <!-- 限制每天文件个数 -->
            <DefaultRolloverStrategy compressionLevel="9"
                                     max="${LOG_TOTAL_NUMBER_DAILY}">
                <Delete basePath="${LOG_HOME}" maxDepth="1">
                    <IfFileName glob="*-debug.*.log"/>
                    <IfLastModified age="${LOG_MAX_HISTORY}"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>
        <RollingFile name="RollingFileWarn" fileName="${LOG_FILE_NAME}/warn.log"
                     filePattern="${FILE_NAME_PATTERN}/${APP_NAME}-warn.%d{yyyy-MM-dd HH.mm}-%i.log">
            <Filters>
                <ThresholdFilter level="WARN"/>
                <ThresholdFilter level="ERROR" onMatch="DENY" onMismatch="NEUTRAL"/>
            </Filters>
            <PatternLayout pattern="${ENCODER_PATTERN}"/>
            <Policies>
                <!-- 归档每天的文件 -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <!-- 限制单个文件大小 -->
                <SizeBasedTriggeringPolicy size="${LOG_MAX_FILE_SIZE}"/>
            </Policies>
            <!-- 限制每天文件个数 -->
            <DefaultRolloverStrategy compressionLevel="9" max="${LOG_TOTAL_NUMBER_DAILY}">
                <Delete basePath="${LOG_HOME}" maxDepth="1">
                    <IfFileName glob="*-warn.*.log"/>
                    <IfLastModified age="${LOG_MAX_HISTORY}"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>
        <RollingFile name="RollingFileError" fileName="${LOG_FILE_NAME}/error.log"
                     filePattern="${FILE_NAME_PATTERN}/${APP_NAME}-error.%d{yyyy-MM-dd HH.mm}-%i.log">
            <Filters>
                <ThresholdFilter level="ERROR"/>
            </Filters>
            <PatternLayout pattern="${ENCODER_PATTERN}"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <SizeBasedTriggeringPolicy size="${LOG_MAX_FILE_SIZE}"/>
            </Policies>
            <DefaultRolloverStrategy compressionLevel="9" max="${LOG_TOTAL_NUMBER_DAILY}">
                <Delete basePath="${LOG_HOME}" maxDepth="1">
                    <IfFileName glob="*-error.*.log"/>
                    <IfLastModified age="${LOG_MAX_HISTORY}"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>
    </Appenders>
    <!-- 只有定义了logger并引入以上Appenders，Appender才会生效 -->
    <Loggers>
        <!-- Root：指定项目的根日志，如果没有单独指定Logger，那么默认使用该Root日志输出 -->
        <root level="${LOG_LEVEL}">
            <!-- AppenderRef：Root的子节点，用来指定该日志输出到哪个Appender -->
            <appender-ref ref="Console"/>
            <appender-ref ref="RollingFileAll"/>
            <appender-ref ref="RollingFileDebug"/>
            <appender-ref ref="RollingFileWarn"/>
            <appender-ref ref="RollingFileError"/>
            <!-- 添加新的Appender引用 -->
            <appender-ref ref="RollingFileAllLevels"/>
        </root>
    </Loggers>
</Configuration>